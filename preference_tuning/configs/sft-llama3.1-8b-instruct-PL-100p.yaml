# Config for multi-device LoRA DPO alignment in lora_dpo_distributed.py
# using a Llama2 7B model
#
# This config assumes that you've run the following command before launching
# this run:
#   tune download meta-llama/Llama-2-7b-hf --output-dir /tmp/Llama-2-7b-hf --hf-token <HF_TOKEN>
#
# To launch on 2 devices, run the following command from root:
#   tune run --nnodes 1 --nproc_per_node 2 lora_dpo_distributed --config llama2/7B_lora_dpo
#
# You can add specific overrides through the command line. For example
# to override the checkpointer directory while launching training
# you can run:
#   tune run --nnodes 1 --nproc_per_node 2 lora_dpo_distributed --config llama2/7B_lora_dpo checkpointer.checkpoint_dir=<YOUR_CHECKPOINT_DIR>
#
# This config works best when the model is being fine-tuned on 2+ GPUs.
# For single device LoRA DPO alignment please use 7B_lora_dpo_single_device.yaml

# Model Arguments
model:
  _component_: torchtune.models.llama3_1.lora_llama3_1_8b
  lora_attn_modules: ['q_proj', 'v_proj', 'output_proj']
  apply_lora_to_mlp: True
  apply_lora_to_output: False
  lora_rank: 8  # higher increases accuracy and memory
  lora_alpha: 16  # usually alpha=2*rank
  lora_dropout: 0.0

# Tokenizer
tokenizer:
  _component_: torchtune.models.llama3.llama3_tokenizer
  path: /data/user_data/lsutawik/codethink/MODELS/Llama-3.1-8B-Instruct/original/tokenizer.model
  max_seq_len: 1024

checkpointer:
  _component_: torchtune.training.FullModelHFCheckpointer
  checkpoint_dir: /data/user_data/lsutawik/codethink/MODELS/Llama-3.1-8B-Instruct
  checkpoint_files: [
    model-00001-of-00004.safetensors,
    model-00002-of-00004.safetensors,
    model-00003-of-00004.safetensors,
    model-00004-of-00004.safetensors
  ]
  adapter_checkpoint: null
  recipe_checkpoint: null
  output_dir: /data/user_data/lsutawik/codethink/OUTPUTS/SFT-Llama-3.1-8B-Instruct-PL100p/
  model_type: LLAMA3
  safe_serialization: True
resume_from_checkpoint: False
save_adapter_weights_only: False

# Dataset and Sampler
dataset:
  _component_: preference_tuning.dataset.sft_dataset
  data_file: "mathinstruct_PL_100p.csv"
  column_map:
    "input": "question"
    "output": "response_i"
  train_on_input: True
seed: null
shuffle: True

# Optimizer and Scheduler
batch_size: 16
epochs: 10
optimizer:
  _component_: torch.optim.AdamW
  fused: True
  weight_decay: 0.05
  lr: 5e-5
lr_scheduler:
  _component_: torchtune.training.lr_schedulers.get_cosine_schedule_with_warmup
  num_warmup_steps: 50
loss:
  _component_: torchtune.modules.loss.CEWithChunkedOutputLoss

max_steps_per_epoch: 100
gradient_accumulation_steps: 1


# Logging
output_dir: /data/user_data/lsutawik/codethink/LOGS/dpo-llama3.1-8b-instruct
metric_logger:
  # _component_: torchtune.training.metric_logging.DiskLogger
  _component_: torchtune.training.metric_logging.WandBLogger
  project: codethink
log_every_n_steps: 1
log_peak_memory_stats: False

# Environment
device: cuda
dtype: bf16
enable_activation_checkpointing: True
